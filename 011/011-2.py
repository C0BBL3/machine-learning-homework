import random

best_strategy = {'strategy': {'000000000': 4, '000100000': 6, '000010000': 7, '000120000': 2, '000010200': 3, '001120000': 5, '000011200': 0, '001122000': 6, '200011200': 1, '001122100': 7, '210011200': 3, '001122120': 0, '210211200': 2, '101122120': 8, '211211200': 8, '101122122': 1, '211211202': 7, '001000000': 1, '000001000': 3, '001200000': 0, '000021000': 1, '101200000': 7, '000021100': 0, '101200020': 4, '200021100': 3, '101210020': 8, '200121100': 1, '101210022': 6, '220121100': 8, '101210122': 1, '220121101': 2, '121210122': 5, '222121101': 7, '000000010': 3, '100000000': 6, '000002010': 0, '100000200': 2, '100002010': 3, '100100200': 4, '100202010': 6, '100120200': 8, '100202110': 2, '100120201': 1, '102202110': 1, '120120201': 2, '112202110': 4, '121120201': 7, '112222110': 8, '121120221': 5, '002000010': 3, '100000002': 7, '002100010': 5, '100000012': 1, '002102010': 8, '120000012': 4, '002102011': 1, '120010012': 2, '022102011': 0, '122010012': 3, '122102011': 6, '122110012': 6, '122102211': 4, '122110212': 5, '000020010': 1, '000000100': 4, '010020010': 0, '200000100': 2, '210020010': 3, '201000100': 7, '210120010': 5, '201000120': 4, '210122010': 2, '201010120': 1, '211122010': 8, '201210120': 5, '211122012': 6, '201211120': 1, '221211120': 8, '100000020': 4, '100000201': 1, '100010020': 8, '100000221': 4, '100010022': 3, '100010221': 2, '100110022': 6, '102010221': 3, '100110222': 2, '102110221': 5, '101110222': 5, '102112221': 1, '101112222': 1, '010000000': 6, '102000000': 4, '012000000': 4, '102100000': 5, '012010000': 6, '102102000': 4, '012010200': 8, '102112000': 7, '012010201': 5, '102112020': 8, '012012201': 0, '102112120': 1, '112012201': 7, '122112120': 8, '112012221': 3, '020010000': 3, '000010002': 6, '020110000': 5, '000010102': 3, '020112000': 7, '000210102': 7, '020112010': 0, '000210112': 0, '220112010': 6, '200210112': 1, '220112110': 2, '210210112': 2, '222112110': 8, '212210112': 5, '100200000': 4, '100210000': 1, '100210200': 1, '120000201': 5, '110210200': 5, '120001201': 7, '110212200': 2, '120001221': 4, '111212200': 7, '120011221': 2, '111212220': 8, '122011221': 3, '000000001': 6, '021000000': 5, '000200001': 7, '121000000': 6, '000200011': 1, '121000200': 8, '020200011': 6, '121000201': 3, '020200111': 2, '121200201': 4, '022200111': 0, '121210201': 5, '122200111': 5, '121212201': 7, '122202111': 4, '100200010': 4, '000110200': 0, '100220010': 2, '200110200': 1, '101220010': 8, '210110200': 2, '121220010': 5, '212110200': 8, '121221010': 8, '212110201': 7, '121221012': 6, '212110221': 5, '000020001': 5, '102010000': 1, '100020001': 2, '122010000': 3, '102020001': 6, '122110000': 6, '102020101': 7, '122110200': 8, '102020121': 3, '122110201': 5, '102120121': 1, '122112201': 7, '122120121': 5, '000200010': 0, '010010200': 8, '010200010': 2, '010010202': 7, '012200010': 6, '010010212': 0, '012200110': 8, '210010212': 2, '012200112': 5, '211010212': 5, '012201112': 0, '211012212': 3, '212201112': 4, '000021001': 6, '000021201': 1, '010021201': 2, '120210000': 2, '012021201': 0, '121210000': 8, '112021201': 7, '121210002': 5, '112021221': 3, '121211002': 6, '010000002': 3, '121211202': 7, '010100002': 2, '000012000': 3, '012100002': 5, '000112000': 2, '012101002': 7, '002112000': 0, '012101022': 4, '102112021': 6, '012111022': 6, '012111222': 0, '000010020': 6, '000000201': 7, '000010120': 0, '001000201': 4, '200010120': 5, '001020201': 7, '001020211': 5, '221010120': 8, '001022211': 1, '221010121': 3, '011022211': 0, '221210121': 5, '211022211': 3, '001020000': 7, '000020100': 0, '001020010': 5, '100020100': 7, '001022010': 1, '100020120': 8, '011022010': 3, '100020121': 5, '011222010': 6, '100022121': 3, '011222110': 0, '100122121': 2, '211222110': 8, '102122121': 1, '101000200': 8, '101000202': 5, '101001202': 1, '101220012': 6, '121001202': 4, '101220112': 5, '121011202': 7, '101222112': 1, '121011222': 3, '010002000': 6, '010002100': 3, '000001200': 7, '010202100': 2, '000001210': 8, '011202100': 4, '000001212': 2, '011222100': 0, '001001212': 3, '111222100': 8, '001201212': 4, '111222102': 7, '001211212': 1, '100200100': 7, '021211212': 0, '100200120': 5, '002001000': 6, '100201120': 8, '002001100': 7, '100201122': 2, '002001120': 8, '101201122': 1, '002001121': 0, '121201122': 4, '202001121': 1, '212001121': 4, '020100000': 6, '212021121': 3, '020100100': 4, '020120100': 2, '021120100': 5, '000000211': 0, '021122100': 8, '200000211': 1, '021122101': 0, '210000211': 4, '221122101': 7, '210020211': 5, '210021211': 2, '212021211': 3, '021001000': 3, '021201000': 0, '021201001': 6, '121201000': 4, '021201201': 7, '121221000': 6, '021201211': 0, '121221100': 7, '221201211': 4, '121221120': 8, '000001020': 1, '000000210': 2, '010001020': 3, '001000210': 5, '010201020': 2, '001002210': 0, '010201021': 6, '101002210': 8, '010201221': 0, '101002212': 3, '110201221': 4, '101102212': 1, '110221221': 2, '121102212': 4, '000100200': 5, '000101200': 8, '010000200': 3, '000101202': 2, '010100200': 0, '001101202': 4, '210100200': 2, '001121202': 1, '211100200': 4, '011121202': 7, '211120200': 8, '011121222': 0, '211120201': 5, '002010000': 3, '211122201': 7, '002110000': 0, '000201000': 7, '202110000': 5, '000201010': 4, '202111000': 7, '000221010': 0, '202111020': 1, '100221010': 8, '212111020': 6, '100221012': 2, '212111220': 8, '101221012': 6, '000001120': 8, '101221212': 1, '000101122': 4, '110000200': 2, '010121122': 0, '112000201': 7, '010010220': 8, '112100221': 4, '012010221': 0, '100120000': 2, '112120000': 5, '000012102': 2, '112122010': 6, '200010000': 7, '200010210': 3, '010001022': 0, '202110210': 1, '110021022': 2, '200110212': 2, '000201210': 1, '221110212': 5, '010201212': 0, '110221212': 2, '000012120': 2, '000210000': 7, '011201022': 0, '002210010': 8, '022210011': 5, '010021002': 0, '022211211': 0, '110021202': 2, '012201210': 0, '200011122': 2, '112201212': 4, '002110020': 8, '020001000': 2, '022110021': 0, '121201002': 4, '020110020': 8, '121211022': 6, '002110221': 1, '000100201': 2, '102100201': 4, '000210210': 8, '000211000': 6, '020210211': 0, '000211210': 0, '001100200': 1, '000201001': 2, '121100200': 7, '002211001': 1, '121110220': 8, '022211101': 0, '000210010': 2, '022211011': 0, '002211010': 0, '020001210': 2, '202211011': 6, '221001210': 3, '000101020': 4, '221121210': 8, '000121021': 1, '002210211': 1, '020110200': 5, '200211120': 2, '020112210': 8, '022112211': 0, '202011120': 3, '022110000': 5, '220011120': 8, '220211121': 2, '220110000': 5, '200011120': 1, '220011121': 2}, 'score': 0, '000010122': 3, '200110122': 1, '210112122': 2, '000112200': 0, '100112220': 1, '112112220': 8, '210112200': 7, '200010102': 3, '200112102': 2, '020210010': 5, '022211010': 0, '122211012': 6, '200010012': 6, '002110200': 5, '200112000': 2, '220112001': 6, '220112121': 2, '201112020': 1, '211112022': 6, '220010010': 2, '221210010': 8, '000112002': 1, '210112002': 2, '220110210': 8, '000212211': 0, '002010120': 8, '002210121': 0, '220112211': 2, '000110202': 2, '001112202': 1, '211112202': 7, '020010120': 5, '020211120': 8, '200210010': 2, '201210012': 1}
new_possible_moves = {}

def print_board(board):
    print('\nCurrent Board\n')
    for i in range(3):
        print('\t' + ''.join([str(space) + ' | ' if j < 2 else str(space) for j, space in enumerate(board[3 * i:3 * (i + 1)])]))
        if i < 2:
            print('\t---------')

for game in range(10):

    print('\nGame:', game + 1)

    board = [i for i in range(9)]

    try:

        for turn in range(9):

            print_board(board)

            if (turn % 2) == 0:

                current_state = ''

                for space in board:
                    if isinstance(space, int): current_state += '0'
                    elif space == 'O': current_state += '1'
                    elif space == 'X': current_state += '2'

                if current_state in best_strategy['strategy'].keys():
                    current_move = best_strategy['strategy'][current_state]
                else:
                    choices = [i for i in board if isinstance(i, int)]
                    current_move = random.choices(choices)[0]
                    new_possible_moves[current_state] = current_move

                if isinstance(board[current_move], int): board[current_move] = 'O'
                
                print('\nThe Best strategy placed an O on space', current_move)

            else:

                print('\nWhat is your next move?\n')
                current_move = input()
                
                if current_move == '': 
                    choices = [i for i in board if isinstance(i, int)]
                    current_move = random.choices(choices)[0]
                else:
                    current_move = int(current_move)
                
                if isinstance(board[current_move], int): board[current_move] = 'X'
                print('\nYou placed an X on space', current_move)

            for index, space in enumerate(board):
                
                horizontal = index in [0, 3, 6] and not isinstance(board[index], int) and board[index + 1] == space and board[index + 2] == space
                vertical = index in [0, 1, 2] and not isinstance(board[index], int) and board[index + 3] == space and board[index + 6] == space
                forward_diagonal = index in [0, 4, 8] and not isinstance(board[index], int) and board[0] == space and board[4] == space and board[8] == space
                backward_diagonal = index in [2, 4, 6] and not isinstance(board[index], int) and board[2] == space and board[4] == space and board[6] == space
                
                if [horizontal, vertical, forward_diagonal, backward_diagonal].count(True) > 0:
                    if space == 'O':
                        print('\nThe Best Strategy Won!')
                        for state, move in new_possible_moves.items():
                            best_strategy[state] = move
                        print_board(board)
                    elif space == 'X':
                        print('\nYou won!')
                        print_board(board)
                    raise Exception('win')

        raise Exception('draw')

    except Exception as exc:
        if exc.args[0] == 'draw':
            print('\nGame Finished: Draw')
            print_board(board)
        continue

print("\n\nNew Strategy\n\n", best_strategy)
    

